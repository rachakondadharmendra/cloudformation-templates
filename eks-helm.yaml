AWSTemplateFormatVersion: '2010-09-09'
Description: 'Amazon EKS Cluster v1.28 with Plugins and Helm Deployment'

Parameters:
  InstanceType:
    Type: String
    Default: t3.small
    Description: 'EC2 instance type for the EKS node group'
    AllowedValues:
      - t2.micro
      - t2.small
      - t2.medium
      - t3.micro
      - t3.small
      - t3.medium

Resources:
  EKSCluster:
    Type: 'AWS::EKS::Cluster'
    Properties:
      Name: !Sub "${AWS::StackName}-eks-cluster"
      Version: '1.28'
      RoleArn: !GetAtt EKSClusterRole.Arn
      ResourcesVpcConfig:
        SecurityGroupIds: 
          - !Ref EKSClusterSG
        SubnetIds: 
          - !Ref PublicSubnet1
          - !Ref PublicSubnet2

  EKSClusterRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              AWS:
                - arn:aws:iam::079711632559:user/admin
            Action:
              - 'sts:AssumeRole'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEKSClusterPolicy

  EKSClusterSG:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Security group for EKS cluster
      VpcId: !Ref VPC

  VPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: '10.0.0.0/16'
      EnableDnsHostnames: true
      EnableDnsSupport: true

  PublicSubnet1:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: '10.0.1.0/24'
      MapPublicIpOnLaunch: true

  PublicSubnet2:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      CidrBlock: '10.0.2.0/24'
      MapPublicIpOnLaunch: true

  NodeGroup:
    Type: 'AWS::EKS::Nodegroup'
    Properties:
      ClusterName: !Ref EKSCluster
      NodegroupName: !Sub "${AWS::StackName}-nodegroup"
      NodeRole: !GetAtt NodeInstanceRole.Arn
      InstanceTypes:
        - !Ref InstanceType      
      ScalingConfig:
        MinSize: 1
        DesiredSize: 1
        MaxSize: 3
      Subnets: 
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2

  NodeInstanceRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              AWS:
                - arn:aws:iam::079711632559:user/admin
            Action:
              - 'sts:AssumeRole'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy
        - arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy
        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly

  HelmDeployment:
    Type: 'Custom::HelmDeployment'
    DependsOn: NodeGroup
    Properties:
      ServiceToken: !GetAtt HelmDeploymentFunction.Arn
      ClusterName: !Ref EKSCluster
      Region: !Ref 'AWS::Region'

  HelmDeploymentFunction:
    Type: 'AWS::Lambda::Function'
    Properties:
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        ZipFile: |
          import subprocess
          import cfnresponse
          import boto3
          import base64

          def handler(event, context):
              if event['RequestType'] == 'Create':
                  try:
                      cluster_name = event['ResourceProperties']['ClusterName']
                      region = event['ResourceProperties']['Region']
                      
                      # Update kubeconfig
                      subprocess.check_call(['aws', 'eks', 'get-token', '--cluster-name', cluster_name, '--region', region])
                      subprocess.check_call(['aws', 'eks', 'update-kubeconfig', '--name', cluster_name, '--region', region])
                      
                      # Add Helm repo and install chart
                      subprocess.check_call(['helm', 'repo', 'add', 'examples', 'https://helm.github.io/examples'])
                      subprocess.check_call(['helm', 'install', 'ahoy', 'examples/hello-world'])
                      
                      cfnresponse.send(event, context, cfnresponse.SUCCESS, {})
                  except Exception as e:
                      print(str(e))
                      cfnresponse.send(event, context, cfnresponse.FAILED, {})
              else:
                  cfnresponse.send(event, context, cfnresponse.SUCCESS, {})

      Runtime: python3.8
      Timeout: 300

  LambdaExecutionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: EKSAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'eks:DescribeCluster'
                  - 'eks:ListClusters'
                Resource: '*'
        - PolicyName: ECRAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'ecr:GetAuthorizationToken'
                  - 'ecr:BatchCheckLayerAvailability'
                  - 'ecr:GetDownloadUrlForLayer'
                  - 'ecr:GetRepositoryPolicy'
                  - 'ecr:DescribeRepositories'
                  - 'ecr:ListImages'
                  - 'ecr:DescribeImages'
                  - 'ecr:BatchGetImage'
                Resource: '*'

Outputs:
  ClusterName:
    Description: 'EKS Cluster Name'
    Value: !Ref EKSCluster

  ClusterArn:
    Description: 'EKS Cluster ARN'
    Value: !GetAtt EKSCluster.Arn