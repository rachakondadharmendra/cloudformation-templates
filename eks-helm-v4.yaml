---
AWSTemplateFormatVersion: '2010-09-09'
Description: 'Amazon EKS Cluster with improved access management'

Parameters:
  ClusterName:
    Type: String
    Default: my-eks-cluster-iam
  NumberOfWorkerNodes:
    Type: Number
    Default: 1
  WorkerNodesInstanceType:
    Type: String
    Default: t3.small
  KubernetesVersion:
    Type: String
    Default: 1.28

Resources:
  ###########################################
  ## Roles
  ###########################################
  EksRole:
    Type: AWS::IAM::Role
    Properties: 
      RoleName: !Sub "${ClusterName}-eks-role"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - eks.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/AmazonEKSClusterPolicy"

  EksNodeRole:
    Type: AWS::IAM::Role
    Properties: 
      RoleName: !Sub "${ClusterName}-node-role"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy"
        - "arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly"
        - "arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy"

  ###########################################
  ## Eks Cluster
  ###########################################
  EksCluster:
    Type: AWS::EKS::Cluster
    Properties:
      Name: !Ref ClusterName
      Version: !Ref KubernetesVersion
      RoleArn: !GetAtt EksRole.Arn
      ResourcesVpcConfig:
        SecurityGroupIds:
          - !ImportValue ControlPlaneSecurityGroupId
        SubnetIds: !Split [ ',', !ImportValue PrivateSubnetIds ]
      AccessConfig:
        AuthenticationMode: API_AND_CONFIG_MAP
        BootstrapClusterCreatorAdminPermissions: true

  EksNodegroup:
    Type: AWS::EKS::Nodegroup
    DependsOn: EksCluster
    Properties:
      ClusterName: !Ref ClusterName
      NodeRole: !GetAtt EksNodeRole.Arn
      ScalingConfig:
        MinSize: !Ref NumberOfWorkerNodes
        DesiredSize: !Ref NumberOfWorkerNodes
        MaxSize: !Ref NumberOfWorkerNodes
      InstanceTypes: 
        - !Ref WorkerNodesInstanceType
      Subnets: !Split [ ',', !ImportValue PrivateSubnetIds ]

  ###########################################
  ## IAM Configuration for Cluster Access
  ###########################################
  ClusterAccessPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName: !Sub "${ClusterName}-access-policy"
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - eks:DescribeCluster
              - eks:ListClusters
            Resource: '*'

  ClusterAccessRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${ClusterName}-access-role"
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              AWS: !Sub "arn:aws:iam::${AWS::AccountId}:root"
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - !Ref ClusterAccessPolicy

Outputs:
  ClusterName:
    Description: The name of the EKS cluster
    Value: !Ref EksCluster
    Export:
      Name: !Sub "${AWS::StackName}-ClusterName"
  ClusterArn:
    Description: The ARN of the EKS cluster
    Value: !GetAtt EksCluster.Arn
    Export:
      Name: !Sub "${AWS::StackName}-ClusterArn"
  ClusterAccessRoleArn:
    Description: The ARN of the IAM role for cluster access
    Value: !GetAtt ClusterAccessRole.Arn
    Export:
      Name: !Sub "${AWS::StackName}-ClusterAccessRoleArn"