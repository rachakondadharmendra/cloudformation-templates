AWSTemplateFormatVersion: '2010-09-09'
Description: 'CloudFormation template for EC2 instance with EKS access using Session Manager and Helm deployment'

Parameters:
  InstanceType:
    Description: EC2 instance type
    Type: String
    Default: t3.medium
  EKSClusterName:
    Description: Name of the EKS cluster
    Type: String
    Default: my-eks-cluster-v7    

Resources:
  EC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: !Ref InstanceType
      ImageId: ami-06d753822bd94c64e  # Replace with appropriate AMI for your region
      IamInstanceProfile: !Ref EC2InstanceProfile
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          yum update -y
          yum install -y amazon-ssm-agent
          systemctl enable amazon-ssm-agent
          systemctl start amazon-ssm-agent

  EC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: "/"
      Roles: 
        - !Ref EC2Role

  EksAdditionalRoleAccess:
    Type: AWS::EKS::AccessEntry
    Properties:
      ClusterName: !Ref EKSClusterName
      PrincipalArn: !GetAtt EC2Role.Arn
      Type: STANDARD
      AccessPolicies:
        - PolicyArn: arn:aws:eks::aws:cluster-access-policy/AmazonEKSClusterAdminPolicy
          AccessScope:
            Type: cluster

  EC2Role:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy
        - arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy
        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
      Policies:
        - PolicyName: EKSClusterAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - eks:DescribeCluster
                  - eks:ListClusters
                Resource: '*'

  SSMAutomationExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: 
                - ssm.amazonaws.com
                - events.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonSSMAutomationRole
      Policies:
        - PolicyName: StartAutomationExecution
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ssm:StartAutomationExecution
                Resource: '*'

  EC2StateChangeRule:
    Type: AWS::Events::Rule
    Properties:
      Description: "Rule to trigger SSM Automation when EC2 instance state changes to running"
      EventPattern:
        source:
          - "aws.ec2"
        detail-type:
          - "EC2 Instance State-change Notification"
        detail:
          state:
            - "running"
          instance-id:
            - !Ref EC2Instance
      State: "ENABLED"
      Targets:
        - Arn: !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:automation-definition/AWS-RunShellScript"
          Id: "TriggerSSMAutomation"
          RoleArn: !GetAtt SSMAutomationExecutionRole.Arn
          InputTransformer:
            InputPathsMap:
              instance: "$.detail.instance-id"
            InputTemplate: |
              {
                "InstanceIds": ["<instance>"],
                "Commands": [
                  "#!/bin/bash",
                  "yum update -y",
                  "yum install -y docker jq",
                  "curl \"https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip\" -o \"awscliv2.zip\"",
                  "unzip awscliv2.zip",
                  "./aws/install",
                  "curl -LO \"https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl\"",
                  "chmod +x kubectl",
                  "mv kubectl /usr/local/bin/",
                  "curl https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3 | bash",
                  "systemctl start docker",
                  "systemctl enable docker",
                  "aws eks update-kubeconfig --name ${EKSClusterName} --region ${AWS::Region}",
                  "helm repo add examples https://helm.github.io/examples",
                  "helm install ahoy examples/hello-world"
                ]
              }

Outputs:
  InstanceId:
    Description: ID of the EC2 instance
    Value: !Ref EC2Instance